pipeline:
  projectIdentifier: default_project
  orgIdentifier: default
  stages:
    - stage:
        name: PyTest
        identifier: PyTest
        description: ""
        type: SecurityTests
        spec:
          cloneCodebase: true
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: K8Connector
              namespace: demo-ns
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Run
                  name: PyTest1
                  identifier: PyTest1
                  spec:
                    connectorRef: demo
                    image: python:latest
                    shell: Sh
                    command: |
                      pip install pytest
                      pip install flask

                      raw_file=$(base64 < test_api.py)
                      config_file=$(echo "$raw_file" | base64 --decode)
                      echo "$config_file" | pytest --junitxml=result.xml
                    reports:
                      type: JUnit
                      spec:
                        paths:
                          - result.xml
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: MarkAsSuccess
    - stage:
        name: gitRepoScan
        identifier: gitRepoScan
        description: ""
        type: SecurityTests
        spec:
          cloneCodebase: true
          sharedPaths:
            - /var/run
          caching:
            enabled: false
            paths: []
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: K8Connector
              namespace: demo-ns
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Background
                  name: DinD
                  identifier: DinD
                  spec:
                    connectorRef: demo
                    image: docker:dind
                    shell: Sh
                    privileged: true
                    entrypoint:
                      - dockerd
              - step:
                  type: Bandit
                  name: Bandit_1
                  identifier: Bandit_1
                  spec:
                    mode: orchestration
                    config: default
                    target:
                      type: repository
                      name: gitReposcan
                      variant: gitReposcanVariant
                    advanced:
                      log:
                        level: info
                    privileged: true
    - stage:
        name: unitTestGitRepoScan_Approval
        identifier: BuildApproval
        description: ""
        type: Approval
        spec:
          execution:
            steps:
              - step:
                  name: Approval
                  identifier: Approval
                  type: HarnessApproval
                  timeout: 1d
                  spec:
                    approvalMessage: |-
                      Please review the following information
                      and approve the pipeline progression
                    includePipelineExecutionHistory: true
                    approvers:
                      minimumCount: 1
                      disallowPipelineExecutor: false
                      userGroups:
                        - Approval
                    isAutoRejectEnabled: false
                    approverInputs: []
        tags: {}
        when:
          pipelineStatus: All
    - stage:
        name: Build
        identifier: Build
        type: CI
        spec:
          cloneCodebase: true
          execution:
            steps:
              - step:
                  type: Run
                  name: Run_2
                  identifier: Run_2
                  spec:
                    shell: Sh
                    command: |+
                      export sha=$(git rev-parse HEAD)

                    outputVariables:
                      - name: sha
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
        description: ""
        when:
          pipelineStatus: All
    - stage:
        name: "Build and push "
        identifier: Build_and_push
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: BuildAndPushDockerRegistry
                  name: BuildAndPushDockerRegistry_1
                  identifier: BuildAndPushDockerRegistry_1
                  spec:
                    connectorRef: demo
                    repo: carthmannh/week4demo
                    tags:
                      - <+pipeline.stages.Build.spec.execution.steps.Run_2.output.outputVariables.sha>
                    dockerfile: Dockerfile
        when:
          pipelineStatus: All
    - stage:
        name: ContainerScan
        identifier: ContainerScan
        description: ""
        type: SecurityTests
        spec:
          cloneCodebase: true
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: K8Connector
              namespace: demo-prod
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Background
                  name: dind
                  identifier: dind
                  spec:
                    connectorRef: demo
                    image: docker:dind
                    shell: Sh
                    entrypoint:
                      - dockerd
              - step:
                  type: AquaTrivy
                  name: AquaTrivy_1
                  identifier: AquaTrivy_1
                  spec:
                    mode: orchestration
                    config: default
                    target:
                      type: container
                      name: containerScan
                      variant: containerScanVariant
                    advanced:
                      log:
                        level: info
                    privileged: true
                    image:
                      type: docker_v2
                      name: carthmannh/week4demo
                      domain: docker.io
                      tag: <+pipeline.stages.Build.spec.execution.steps.Run_2.output.outputVariables.sha>
          sharedPaths:
            - /var/run
          caching:
            enabled: false
            paths: []
        when:
          pipelineStatus: All
    - stage:
        name: ContainerScan_Approval
        identifier: ContainerScanApproval
        description: ""
        type: Approval
        spec:
          execution:
            steps:
              - step:
                  name: containerScanApproval
                  identifier: containerScanApproval
                  type: HarnessApproval
                  timeout: 1d
                  spec:
                    approvalMessage: |-
                      Please review the following information
                      and approve the pipeline progression
                    includePipelineExecutionHistory: true
                    approvers:
                      minimumCount: 1
                      disallowPipelineExecutor: false
                      userGroups:
                        - Approval
                    isAutoRejectEnabled: false
                    approverInputs: []
        tags: {}
    - stage:
        name: CDStage
        identifier: CDStage
        description: ""
        type: Pipeline
        spec:
          org: default
          pipeline: K8Deployment
          project: default_project
          inputs:
            identifier: K8Deployment
            stages:
              - stage:
                  identifier: K8Deploy
                  type: Deployment
                  spec:
                    service:
                      serviceInputs:
                        serviceDefinition:
                          type: Kubernetes
                          spec:
                            artifacts:
                              primary:
                                primaryArtifactRef: PythonApp
                                sources:
                                  - identifier: PythonApp
                                    type: DockerRegistry
                                    spec:
                                      tag: <+pipeline.stages.Build.spec.execution.steps.Run_2.output.outputVariables.sha>
                    environment:
                      infrastructureDefinitions:
                        - identifier: PreProdInfra
                          inputs:
                            identifier: PreProdInfra
                            type: KubernetesDirect
                            spec:
                              namespace: demo-ns
        when:
          pipelineStatus: All
  properties:
    ci:
      codebase:
        connectorRef: account.Github_OAuth_1710645807319
        repoName: carthmannH/week4
        build: <+input>
  identifier: BuildPushSTOScanRepoScanContainer
  tags: {}
  name: BuildPushPytestSTOScanRepo
